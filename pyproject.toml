[project]
name = "invoke"
# TODO: soooo what do about runtime access to version info these days? is that
# what 'packaging' is for now? what was the latest thing a few years ago?
# TODO: or is this a job for the hybrid toml/py approach re: hynek?
version = "0.1.0"
# TODO: or higher. sigh
requires-python = ">=3.7"

# TODO: rest of my setup.py here, as needed, again leaving truly necessary
# dynamism in there.
# TODO: eg: readme-as-long_description - is that still a thing? what do other
# folks do? can we just indicate a file "as the long desc"?

# TODO: clean up / doublecheck the below
# TODO: also modernize the type hints, tho maybe check to see if someone
# already has sigh
[tool.mypy]
# check_untyped_defs = true
# follow_imports_for_stubs = true
# disallow_any_decorated = true
# disallow_any_generics = true
# disallow_any_unimported = true
# disallow_incomplete_defs = true
# disallow_subclassing_any = true
# disallow_untyped_calls = true
# disallow_untyped_decorators = true
disallow_untyped_defs = true
# enable_error_code = [
#     "redundant-expr",
#     "truthy-bool",
#     "ignore-without-code",
#     "unused-awaitable",
#
exclude = [
    "integration/", "tests/", "setup.py", "sites/www/conf.py", "build/",
]
ignore_missing_imports = true
# implicit_reexport = False
# no_implicit_optional = true
# pretty = true
# show_column_numbers = true
# show_error_codes = true
# strict_equality = true
warn_incomplete_stub = true
warn_redundant_casts = true
# warn_return_any = true
# warn_unreachable = true
warn_unused_ignores = true

[[tool.mypy.overrides]]
module = "invoke.vendor.*"
ignore_errors = true

[[tool.mypy.overrides]]
module = "alabaster"
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "icecream"
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "invocations"
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "pytest_relaxed"
ignore_missing_imports = true
